import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';

const Profile = ({ siteUrl, onSiteUrlChange }) => {
  const { currentUser, updatePassword, logout, loading } = useAuth();
  const navigate = useNavigate();
  const [currentPlan, setCurrentPlan] = useState('light');
  const [isEditingPassword, setIsEditingPassword] = useState(false);
  const [oldPassword, setOldPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const plans = [
    {
      id: 'light',
      name: '–õ–∞–π—Ç',
      price: '9900',
      features: [
        '–î–æ 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
        '–ë–∞–∑–æ–≤—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç',
        '–ü–æ–¥–¥–æ–º–µ–Ω –Ω–∞ uilet.kz',
        '–ë–∞–∑–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π'
      ]
    },
    {
      id: 'business',
      name: '–ë–∏–∑–Ω–µ—Å',
      isPopular: true,
      price: '19900',
      features: [
        '–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –õ–∞–π—Ç',
        '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç',
        '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω',
        '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Calendar',
        '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç'
      ]
    },
    {
      id: 'pro',
      name: '–ü—Ä–æ',
      price: '29900',
      features: [
        '–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞ –ë–∏–∑–Ω–µ—Å',
        '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7',
        '–ú—É–ª—å—Ç–∏–∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—Å–µ—Ö –ø–ª–æ—â–∞–¥–æ–∫',
        'API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏',
        '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Booking.com –∏ Airbnb'
      ]
    }
  ];

  const handlePasswordUpdate = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    try {
      await updatePassword(oldPassword, newPassword);
      setSuccess('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω');
      setIsEditingPassword(false);
      setOldPassword('');
      setNewPassword('');
    } catch (error) {
      setError(error.message);
    }
  };

  const handleLogout = async () => {
    try {
      await logout();
      navigate('/auth');
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
    }
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-xl font-bold">–ü—Ä–æ—Ñ–∏–ª—å</h2>
        <button
          onClick={handleLogout}
          className="px-4 py-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
        >
          –í—ã–π—Ç–∏
        </button>
      </div>
      
      <div className="space-y-6">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
        <div className="border rounded-lg p-4">
          <h3 className="font-medium mb-4">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
          <div className="space-y-2">
            <div>
              <span className="text-gray-600">Email: </span>
              <span className="font-medium">{currentUser?.email}</span>
            </div>
            <div className="flex items-center justify-between">
              <div>
                <span className="text-gray-600">–ü–∞—Ä–æ–ª—å: </span>
                <span className="font-medium">‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢</span>
              </div>
              <button
                onClick={() => setIsEditingPassword(true)}
                className="text-blue-600 hover:text-blue-700 text-sm"
              >
                –ò–∑–º–µ–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>

        {/* –§–æ—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è */}
        {isEditingPassword && (
          <div className="border rounded-lg p-4">
            <form onSubmit={handlePasswordUpdate} className="space-y-4">
              {error && (
                <div className="p-3 bg-red-50 text-red-500 rounded-lg">
                  {error}
                </div>
              )}
              {success && (
                <div className="p-3 bg-green-50 text-green-500 rounded-lg">
                  {success}
                </div>
              )}
              
              <div>
                <label className="block text-sm font-medium mb-1">
                  –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
                </label>
                <input
                  type="password"
                  value={oldPassword}
                  onChange={(e) => setOldPassword(e.target.value)}
                  className="w-full p-3 border border-gray-200 rounded-xl"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-1">
                  –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
                </label>
                <input
                  type="password"
                  value={newPassword}
                  onChange={(e) => setNewPassword(e.target.value)}
                  className="w-full p-3 border border-gray-200 rounded-xl"
                  required
                />
              </div>

              <div className="flex gap-3">
                <button
                  type="submit"
                  disabled={loading}
                  className="px-4 py-2 bg-[#2563EB] text-white rounded-lg hover:bg-opacity-90 transition-colors"
                >
                  {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                </button>
                <button
                  type="button"
                  onClick={() => {
                    setIsEditingPassword(false);
                    setOldPassword('');
                    setNewPassword('');
                    setError('');
                  }}
                  className="px-4 py-2 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        )}

        {/* –¢–∞—Ä–∏—Ñ—ã */}
        <div className="border rounded-lg p-4 mb-6">
          <h3 className="font-medium mb-4">–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {plans.map(plan => (
              <div
                key={plan.id}
                className={`border rounded-lg p-4 cursor-pointer relative ${
                  currentPlan === plan.id ? 'border-blue-600 bg-blue-50' : ''
                }`}
                onClick={() => setCurrentPlan(plan.id)}
              >
                {plan.isPopular && (
                  <div className="absolute -top-3 left-1/2 transform -translate-x-1/2 whitespace-nowrap">
                    <span className="bg-orange-100 text-orange-600 text-xs px-2 py-1 rounded-full inline-flex items-center gap-1">
                      <span role="img" aria-label="fire">üî•</span>
                      –ü–æ–∫—É–ø–∞—é—Ç —á–∞—â–µ
                    </span>
                  </div>
                )}
                <div className="flex justify-between items-center mb-2">
                  <h4 className="font-medium">{plan.name}</h4>
                  <span className="text-lg font-bold">{plan.price} ‚Ç∏</span>
                </div>
                <ul className="text-sm text-gray-600 space-y-2">
                  {plan.features.map((feature, index) => (
                    <li key={index} className="flex items-center gap-2">
                      <span className="w-5 h-5 rounded-full bg-blue-100 flex items-center justify-center text-xs">‚úì</span>
                      {feature}
                    </li>
                  ))}
                </ul>
                {currentPlan === plan.id && (
                  <div className="mt-4 text-sm text-blue-600">
                    –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ
                  </div>
                )}
              </div>
            ))}
          </div>
          <div className="mt-4 flex justify-end">
            <button
              className="px-4 py-2 bg-blue-600 text-white rounded-lg"
              onClick={() => {/* –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ */}}
            >
              –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ
            </button>
          </div>
        </div>

        {/* –î–æ–º–µ–Ω */}
        <div className="border rounded-lg p-4">
          <h3 className="font-medium mb-4">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–µ–Ω–∞</h3>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">
                –í–∞—à –¥–æ–º–µ–Ω –Ω–∞ Uilet.kz
              </label>
              <div className="flex gap-2">
                <input
                  type="text"
                  value={siteUrl.split('.')[0]}
                  onChange={(e) => onSiteUrlChange(`${e.target.value}.uilet.kz`)}
                  className="flex-1 p-2 border rounded-lg"
                />
                <span className="p-2 text-gray-500">.uilet.kz</span>
              </div>
            </div>
            {currentPlan === 'pro' && (
              <div>
                <label className="block text-sm font-medium mb-1">
                  –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω
                </label>
                <input
                  type="text"
                  className="w-full p-2 border rounded-lg"
                  placeholder="example.com"
                />
              </div>
            )}
          </div>
        </div>

        <button className="w-full bg-blue-600 text-white py-3 rounded-lg">
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        </button>
      </div>
    </div>
  );
};

export default Profile; 